/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jsecretstrings.core;

import java.security.Key;
import java.security.MessageDigest;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

/**
 * This class contains methods to encrypt and decrypt
 * strings using AES Algorithm with SHA-1 key hashes
 * 
 * @author giovanni
 * @Created on: Aug 27, 2015
 */
public class Crypter {
    
    private static final String ALGORITHM = "AES";

    /**
     * Takes and string and creates a hash through SHA-1
     * using only the first 128 bits
     * 
     * @param keyStr : Keyword to generate the hash
     * @return <code>java.security.Key</code>
     * 
     * @throws Exception is thrown if fatal error occurs
     */
    private static Key generateKey(String keyStr) throws Exception {
        
        byte[] keyValue   = keyStr.getBytes("UTF-8");
        MessageDigest sha = MessageDigest.getInstance("SHA-1");
        
        keyValue = sha.digest(keyValue);
        keyValue = Arrays.copyOf(keyValue, 16); // Solo los primeros 128 bits    
        
        return new SecretKeySpec(keyValue, ALGORITHM);
    }

    /**
     * Encrypts <code>data</code> using <code>keyWord</code> 
     * to generate a hash
     * 
     * @param data String to encrypt
     * @param keyWord Super secret word to create hash
     * @return Encrypted resulting string
     */
    public static String encrypt(String data, String keyWord) {
        try {
            Key key = generateKey(keyWord);
            Cipher c = Cipher.getInstance(ALGORITHM);
            c.init(Cipher.ENCRYPT_MODE, key);

            byte[] encVal = c.doFinal(data.getBytes());
            String encryptedValue = DatatypeConverter.printBase64Binary(encVal);
            return encryptedValue;
        }
        catch(Exception err) {
            System.err.println("ERROR: Maybe the keyWord is invalid.");
            return null;
        }
    }

    /**
     * Takes an encrypted string and decrypts using inverse process than
     * <code>encrypt</code>
     * 
     * @param encryptedData string generated by <code>encrypt</code> method
     * @param keyWord The same used with <code>encrypt</code> method 
     *                to generate <code>encryptedData</code>
     * 
     * @return decrypted string
     */
    public static String decrypt(String encryptedData, String keyWord) {
        try {
            
            Key key = generateKey(keyWord);
            Cipher c = Cipher.getInstance(ALGORITHM);
            c.init(Cipher.DECRYPT_MODE, key);

            byte[] decordedValue = DatatypeConverter.parseBase64Binary(encryptedData);
            byte[] decValue = c.doFinal(decordedValue);
            String decryptedValue = new String(decValue);
            return decryptedValue;
        }
        catch(Exception err) {
            System.err.println("ERROR: Maybe the keyWord is invalid.");
            return null;
        }
    }

}